package com.odysystems.breerabit.webapp.util;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.odysseyconsult.breerabbit.translator.MappingMapToUTM_Input2;
import com.odysystems.Constants;


/**
 * BreerRabbitConsole.java
 *
 * This file was generated by MapForce 2015sp2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */

public class PayrollMapInterface {
	
	protected static Log log = LogFactory.getLog(PayrollMapInterface.class);
	

		public String transform(String fileAndPath, String filename, String path, String payrollDate, String payrollType) {
			String outName = null;
			 switch (payrollType) {
	            case "gcs":  outName = gcsTransform(fileAndPath, filename, path, payrollDate);
	                     break;
	            case "cpp": outName = cppTransform(fileAndPath, filename, path, payrollDate);
	            break;
			 };
			
			
			return outName;
		}
		
		
		private String cppTransform(String fileAndPath, String filename, String path, String payrollDate){
			
			
			
			return null;
		}
		
		private String gcsTransform(String fileAndPath, String filename, String path, String payrollDate){
			String outFile = null;
			String outName = null;

			try { // Mapping
				TraceTargetConsole ttc = new TraceTargetConsole();


				MappingMapToUTM_Input2 MappingMapToUTM_InputObject = new MappingMapToUTM_Input2();




				MappingMapToUTM_InputObject.registerTraceTarget(ttc);
		

				// run mapping
				//
				// you have different options to provide mapping input and output:
				//
				// files using file names (available for XML, text, and Excel):
				//   com.altova.io.FileInput(String filename)
				//   com.altova.io.FileOutput(String filename)
				//
				// streams (available for XML, text, and Excel):
				//   com.altova.io.StreamInput(java.io.InputStream stream)
				//   com.altova.io.StreamOutput(java.io.OutputStream stream)
				//
				// strings (available for XML and text):
				//   com.altova.io.StringInput(String xmlcontent)
				//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
				//
				// Java IO reader/writer (available for XML and text):
				//   com.altova.io.ReaderInput(java.io.Reader reader)
				//   com.altova.io.WriterOutput(java.io.Writer writer)
				//
				// DOM documents (for XML only):
				//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
				//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
				// 
				// By default, run will close all inputs and outputs. If you do not want this,
				// call the following function:
				// MappingMapToUTM_InputObject.setCloseObjectsAfterRun(false);

				
				
				{
					com.altova.io.Input Deltek_GCS_Payroll_Output2Source = com.altova.io.StreamInput.createInput(fileAndPath);
					DateFormat df = new SimpleDateFormat("ddMMyy");
					Date dateobj = new Date();
					System.out.println(df.format(dateobj));
					String date = df.format(dateobj).toString();
					log.debug("received the path of " + path);
					outName = "Payroll_Output_" + date + ".csv";
					outFile = path + Constants.FILE_SEP + outName;
					log.debug("Storing file at " + outFile);
					com.altova.io.Output UTM_InputTarget = new com.altova.io.FileOutput(outFile);
					log.debug("Starting Transform Program");
					if (payrollDate == null){payrollDate = "1/1/1969";};
					MappingMapToUTM_InputObject.run(
							Deltek_GCS_Payroll_Output2Source, payrollDate,
							UTM_InputTarget);
				}


				log.debug("Finished Transformation");
				System.out.println("Finished");
			} 
			catch (com.altova.UserException ue) 
			{
				System.out.print("USER EXCEPTION:");
				System.out.println( ue.getMessage() );
				System.exit(1);
			}
			catch (com.altova.AltovaException e)
			{
				System.out.print("ERROR: ");
				System.out.println( e.getMessage() );
				if (e.getInnerException() != null)
				{
					System.out.print("Inner exception: ");
					System.out.println(e.getInnerException().getMessage());
					if (e.getInnerException().getCause() != null)
					{
						System.out.print("Cause: ");
						System.out.println(e.getInnerException().getCause().getMessage());
					}
				}
				System.out.println("\nStack Trace: ");
				e.printStackTrace();
				System.exit(1);
			}
			
			catch (Exception e) {
				System.out.print("ERROR: ");
				System.out.println( e.getMessage() );
				System.out.println("\nStack Trace: ");
				e.printStackTrace();
				System.exit(1);
			}
			return outName;

		}
	}


	class TraceTargetConsole implements com.altova.TraceTarget {
		@Override
		public void writeTrace(String info) {
			System.out.println(info);
		}
	}

