/**
 * MappingMapToUTM_Input2.java
 *
 * This file was generated by MapForce 2015sp2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.odysseyconsult.breerabbit.translator;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToUTM_Input2 extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_PayrollII;
		java.lang.String var2_Date;
	
		public main(com.altova.mapforce.IMFNode var1_instance_PayrollII, java.lang.String var2_Date)
		{
			this.var1_instance_PayrollII = var1_instance_PayrollII;
			this.var2_Date = var2_Date;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			IEnumerator var3_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var4_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var5_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var6_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var7_if_exists;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 3;				
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Rows", closure.var1_instance_PayrollII)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 4; return false; }
				var4_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("O_T HOURS", ((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))));
				var5_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("FILE #", ((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))));
				var6_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("REG HOURS", ((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))));
				var7_if_exists = new com.altova.functions.Core.SequenceCache((new seq1_if_exists(var4_filter_elements_nodename, var6_filter_elements_nodename)));
				current = com.altova.functions.Core.createElement("Rows", (new seq2_join(var5_filter_elements_nodename, closure.var2_Date, var6_filter_elements_nodename, ((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current())), var7_if_exists, var4_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IEnumerable var2_filter_elements_nodename;
	
		public seq1_if_exists(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IEnumerable var2_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_filter_elements_nodename = var2_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_if_exists closure;
			public Enumerator(seq1_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 2; return false; }
				if (!(com.altova.functions.Core.exists(closure.var2_filter_elements_nodename))) {state = 0; return false; }
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 0; return false; }
				current = com.altova.functions.Core.add(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var2_filter_elements_nodename))), com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var2_filter_elements_nodename))) {state = 0; return false; }
				current = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var2_filter_elements_nodename)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		java.lang.String var2_Date;
		com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
		com.altova.mapforce.IMFNode var4_current;
		com.altova.mapforce.IEnumerable var5_if_exists;
		com.altova.mapforce.IEnumerable var6_filter_elements_nodename;
	
		public seq2_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, java.lang.String var2_Date, com.altova.mapforce.IEnumerable var3_filter_elements_nodename, com.altova.mapforce.IMFNode var4_current, com.altova.mapforce.IEnumerable var5_if_exists, com.altova.mapforce.IEnumerable var6_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_Date = var2_Date;
			this.var3_filter_elements_nodename = var3_filter_elements_nodename;
			this.var4_current = var4_current;
			this.var5_if_exists = var5_if_exists;
			this.var6_filter_elements_nodename = var6_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_join closure;
			public Enumerator(seq2_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 4;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("Card ID", com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat("000", com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))), "-5ZPKG")));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement("Date", com.altova.functions.Core.box(closure.var2_Date));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 8;				
				if (!((Boolean)com.altova.functions.Core.first((new seq3_if_exists(closure.var3_filter_elements_nodename, closure.var4_current))))) {state = 8; return false; }
				current = com.altova.functions.Core.createElement("Pay Code #", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString((java.math.BigDecimal)com.altova.functions.Core.first((new seq4_if_exists(closure.var3_filter_elements_nodename, closure.var4_current))))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				if (!((Boolean)com.altova.functions.Core.first((new seq5_if_exists(closure.var5_if_exists, closure.var4_current))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement("Hours", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString((java.math.BigDecimal)com.altova.functions.Core.first((new seq6_if_exists(closure.var5_if_exists, closure.var6_filter_elements_nodename, closure.var3_filter_elements_nodename, closure.var4_current))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq3_if_exists(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_if_exists closure;
			public Enumerator(seq3_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("HOURS 3 CODE", closure.var2_current)))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("HOURS 4 CODE", closure.var2_current));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq4_if_exists(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_if_exists closure;
			public Enumerator(seq4_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 2; return false; }
				current = new java.math.BigDecimal("0");
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("HOURS 3 CODE", closure.var2_current)))) {state = 5; return false; }
				current = new java.math.BigDecimal("2");
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = new java.math.BigDecimal("1");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_exists;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq5_if_exists(com.altova.mapforce.IEnumerable var1_if_exists, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_if_exists = var1_if_exists;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_if_exists closure;
			public Enumerator(seq5_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_if_exists))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("HOURS 3 AMOUNT", closure.var2_current)))) {state = 5; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("HOURS 4 AMOUNT", closure.var2_current));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_if_exists;
		com.altova.mapforce.IEnumerable var2_filter_elements_nodename;
		com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
		com.altova.mapforce.IMFNode var4_current;
	
		public seq6_if_exists(com.altova.mapforce.IEnumerable var1_if_exists, com.altova.mapforce.IEnumerable var2_filter_elements_nodename, com.altova.mapforce.IEnumerable var3_filter_elements_nodename, com.altova.mapforce.IMFNode var4_current)
		{
			this.var1_if_exists = var1_if_exists;
			this.var2_filter_elements_nodename = var2_filter_elements_nodename;
			this.var3_filter_elements_nodename = var3_filter_elements_nodename;
			this.var4_current = var4_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_if_exists closure;
			public Enumerator(seq6_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_if_exists))) {state = 2; return false; }
				if (!(com.altova.functions.Core.exists(closure.var2_filter_elements_nodename))) {state = 3; return false; }
				current = com.altova.functions.Core.add(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var3_filter_elements_nodename))), com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var2_filter_elements_nodename))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("HOURS 3 AMOUNT", closure.var4_current)))) {state = 8; return false; }
				current = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("HOURS 3 AMOUNT", closure.var4_current))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var3_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("HOURS 4 AMOUNT", closure.var4_current))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_PayrollII;
		java.lang.String var2_Date;
	
		public Outer(com.altova.mapforce.IMFNode var1_instance_PayrollII, java.lang.String var2_Date)
		{
			this.var1_instance_PayrollII = var1_instance_PayrollII;
			this.var2_Date = var2_Date;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var3_map;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_map = ((new main(closure.var1_instance_PayrollII, closure.var2_Date))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_map.moveNext()) {state = 3; return false; }
				current = var3_map.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_map.close(); var3_map = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_map.close(); var3_map = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.tablelike.Table varPayrollIIInstance;
	protected String varDate;

	public void run(String PayrollIISourceFilename, String DateSourceParameter, String UTM_Input2TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + PayrollIISourceFilename + "...\n");
		com.altova.io.FileInput PayrollIISource = new com.altova.io.FileInput(PayrollIISourceFilename);
		// open target stream
		com.altova.io.FileOutput UTM_Input2Target = new com.altova.io.FileOutput(UTM_Input2TargetFilename);

		// run
		run(PayrollIISource, DateSourceParameter, UTM_Input2Target);

		// close source streams
		PayrollIISource.close();
		// close target stream
		writeTrace("Saving " + UTM_Input2TargetFilename + "...\n");
		UTM_Input2Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input PayrollIISource, String DateSourceParameter, com.altova.io.Output UTM_Input2Target) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.altova.text.tablelike.csv.Table PayrollIIInstanceObject = new com.altova.text.tablelike.csv.Table(com.odysseyconsult.breerabbit.translator.Name10_07_16_Deltek.Name10_07_16_Deltek_TypeInfo.binder.getTypes()[com.odysseyconsult.breerabbit.translator.Name10_07_16_Deltek.Name10_07_16_Deltek_TypeInfo._altova_ti_altova_RowsType],0);
		varPayrollIIInstance = PayrollIIInstanceObject;
		com.altova.text.tablelike.Table PayrollIISourceObject = varPayrollIIInstance;
			PayrollIIInstanceObject.getFormat().setAssumeFirstRowAsHeaders( true );
			PayrollIIInstanceObject.getFormat().setFieldDelimiter( ',' );
			PayrollIIInstanceObject.getFormat().setRemoveEmpty( true );
			PayrollIIInstanceObject.getFormat().setQuoteCharacter( '\"' );
		varPayrollIIInstance.setEncoding( "UTF-8", false, false );
		varPayrollIIInstance.parse(PayrollIISource);
		if (runDoesCloseAll)
			PayrollIISource.close();
			varDate = DateSourceParameter;


		// Create the target
		com.odysseyconsult.breerabbit.translator.Text_file2.Text_file2Document UTM_Input2TargetDoc = new com.odysseyconsult.breerabbit.translator.Text_file2.Text_file2Document(com.odysseyconsult.breerabbit.translator.Text_file2.Text_file2_TypeInfo.binder.getTypes()[com.odysseyconsult.breerabbit.translator.Text_file2.Text_file2_TypeInfo._altova_ti_altova_RowsType],0);
		com.altova.text.tablelike.Table UTM_Input2TargetObject = UTM_Input2TargetDoc;
			UTM_Input2TargetDoc.getFormat().setAssumeFirstRowAsHeaders( false );
			UTM_Input2TargetDoc.getFormat().setFieldDelimiter( ',' );
			UTM_Input2TargetDoc.getFormat().setRemoveEmpty( true );
			UTM_Input2TargetDoc.getFormat().setQuoteCharacter( '\"' );

		// Execute mapping

		main mapping = new main(new com.altova.text.TableAsMFNodeAdapter(varPayrollIIInstance, PayrollIISource.getFilename()), DateSourceParameter);

		com.altova.text.MFTextWriter.write(mapping, UTM_Input2TargetObject);
		// Close the target
		UTM_Input2TargetDoc.setEncoding( "UTF-8", false, false );
		UTM_Input2TargetDoc.save(UTM_Input2Target);

		
		if (runDoesCloseAll)
		{
			PayrollIISource.close();
			UTM_Input2Target.close();
		}
	}



}
